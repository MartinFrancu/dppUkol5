INICPP - Review implementace

============================

Návrh, až na detaily, splňuje požadovanou funkcionalitu a kód dodržuje vybrané 
konvence. Slabinou návrhu se zdá být poněkud těžkopádné přidávání nových typů. 
Celkově ale návrh považujeme za kvalitní a dobře implementovaný.  


Formální požadavky

------------------

Autoři striktně dodržovali zvolenou konvenci formátování kódu. Zvolené názvy 
metod a proměnných jsou dobře popisné. Zanoření bylo uržováno na rozumné úrovni
maximálně tří zanoření. Metody jsou až na výjimky ("internal_load") velmi 
krátké což rovněž příspívá k přehlednosti. Komentáře jsou přítomny v téměř
každé delší metodě. Celkově tedy hodnotíme kód jako dobře přehledný. K ošetřetní
chyb jsou použity vyjímky.

Funkcionalita knihovny odpovídá zadání. Jediným prohřešením proti zadání, které 
jsme zaznamenali je rozhodnutí autorů nezachovávat strukturu vstupu. Balíček 
obsahuje adekvátní dokumentaci a cmake soubory pro build všech částí, podle 
zadání. Pokrytí kódu pomocí testů je adekvátní.

Návrh rozdělil pravomoci do snadno srozumitelných tříd. Třída "parser" se stará 
o převod dat z textového formátu do strukturovaného formátu. Produktem načtení 
".ini" souboru je instance třídy "config". Načtení je možno provádět buď ze 
souboru nebo z istreamu. 

Ta sdružuje načtené sekce a zpřístupňuje je pomocí operátoru [] podle indexu 
i podle jména sekce. Tento systém umožňuje pohodlný přístup k sekcím, zároveň 
však může být dvojí způsob zdrojem nejasnosti. 

Třída "section" (reprezentující sekci voleb) potom stejným způsobem 
zpřístupňuje jednotlivé volby. 

Logicky následuje třída "option". Jediná třída slouží k přístupu k seznamům 
hodnot i k jediné hodnotě (což může vést uživatele k chybám, nicméně v 
dokumentaci je explicitně uvedeno chování v těchto případech, takže je uživatel 
na toto chování připraven). Třída mění typ obsažené hodnoty podle třídy hodnoty 
do ní přiřazené (přetížený operátor "="). Tato vlastnot na jedné straně 
usnaďnuje zacházení s volbami. Na druhé straně uživateli snadno dovolí změnit 
typ volby se kterou pracuje (nepozorné přiřazení atd..). Situace ve které by 
se v rámci práce s konfigurací změnil typ nějaké volby asi nebude moc častá. 
Proto bych je toto chování diskutabilní. Nové datové typy tedy vyžadují 
implementaci nových metod v této třídě (jak je poznamenán v části Rozšíření).

Speciální výčtové typy jsou ošetřeny type "internal_enum_type".  

Kontrola, zda načtená konfigurace odpovídá definovanému schématu 
konfigurace, se provádí pomocí metody třídy "config" a pomocných tříd "schema",
"section_schema" a "option_schema". 


Doprovodný text

---------------

Zdůvodnění návrhu bylo dostačující. Z hlediska uživatele by se dalo vytknout
přílišné soustředění se na technické detaily a důvody k volbě jednotlivých 
frameworků. (Jakmile jsou již tyto rozhodnutí dána, uživatel s nimi nic neudělá.
Proto(pro uživatele/programátora rozšíření) nemají valnou hodnotu.) Asi by bylo 
vhodnější využít daný prostor k lepšímu seznámení čtenáře s vnitřní strukturou 
knihovny (převážně nedokumentované privátní metody a jejich funkce). Kdyby 
autoři předvídali rozšíření o další datový typ, zde by bylo dobré naznačit místa
kde je potřeba kód knihovny upravit. Z tohoto důvodu nebylo zdůvodnění návrhu 
velkým pomocníkem při implementace rozšíření. Dobře však dokumentuje proces 
vzniku návrhu. 

Dokumentace je dostačující, ale v některých případech možná příliš stručná.
Např. ze samotné dokumentace nemusí být zřejmé, k jakému účelu slouží třída
"internal_enum_type" -- tedy že se jedná o alias k std::string pro odlišení
stringu a enumů v rámci šablon.

Příležitostně se dá v dokumentaci objevit nějaká nepřesnost, například 
konstruktor třídy "option" beroucí jako parametry dva stringy. V dokumentaci je
popsán jako konstruktor pro volby s určeným typem. Podle implementace je však 
vytvořena instance třídy "option" nastavená na hodnotu typu "string". 


Rozšíření
---------

Přidání funkcionality "#include" do vstupního formátu bylo přiměřeně pracné --
dle našeho názoru to není něco, co by mohl programátor očekávat jako
potenciální rozšíření (oproti dalším typům), tedy přístup autorů byl správný.
I tak hodnotím kladně, že pro implementaci by bylo potřeba změnit pouze metodu
"parser::load_internal" (ačkoli jsme pro lepší testování zvolili trochu
složitější návrh, ktery vyžadoval více změn.) V tomto ohledu je tedy původní
návrh přiměřeně snadno rozšířitelný. V rámci našeho rozšíření jsme vytvořili
třídu "resource", která slouží jako náhrada za stream ze které lze pouze číst
po řádkách, a jehož různé implementace zprostředkovávají automatické
includování nejen z více souborů ale i z více pojmenovaných istreamů, což jsme
využili při psaní testů. Existující metody pro čtení z pojmenovaného souboru
jsou převedeny na "file_resource_stack" a tedy přímo zprostředkovávají toto
rozšíření.

Rozšíření knihovny o nový datový typ nebylo moc příjemné. Autoří zvolili řešení 
pomocí výčtového typu obsahující všechny podporované formáty. Vlastní 
implementace různých chování potom byla řešena pomocí větvení "switch" podle 
výčtového typu formátů dat. Nevýhodou tohoto přístupu je roztroušení kódu, který
se vztahuje k jednotlivým datovým typům do různých míst. Je potřeba upravit 
nejen třídu "option_type", ale i metody tříd "option" a "option_schema". Některé
části kódu očekávají od implementovaných určitou podporu (konkrétně privátní
třída "convertor" konverzní operátory, na jiných místech operator==
a operator<). Z toho důvodu bylo zapotřebí zabalit časový typ ("time_point"
z <chrono>) a typ "locale" (z <locale>) do nových typů ("internal_date_type"
a "internal_locale_type", aliasované na "date_ini_t" a "locale_ini_t"), což
přináší potenciální problémy s využitím, jelikož původní typy nejsou přímo
k dispozici.

Autor následného rozšíření o další typ se tedy musí seznámit s celým projektem,
aby upravil všechny potřebné pasáže. Rozšíření v tomto smyslu bylo naznačeno
již v původním zadání, proto považovažujeme prezentované řešení v tomto ohledu
za spíše špatně rozšiřitelné. 

  
Unit testy
----------

Unit testy projektu jsou vytvořeny pomocí v frameworku Google Test. Testy jsou 
rozděleny podle tříd jejichž funkčnost prověřují. Testování se zaměřuje na 
základní použití knihovny s běžnými případy. 

Vyskytl se teoretický problém, že 
v některých testech nebyla naplněn význam spojení "unit test", protože bylo 
testováno hned několik tříd najednou. To však vyplývá z povahy problému: nelze 
testovat třídu "config" bez ostatních tříd, které spravuje. Z tohot důvodu to
nepovažujeme za problém.

Pokrytí kódu testy je velmi dobré. Testy jsou doplněny komentářem a jejich 
průběh je dobře srozumitelný. 

Naše rozšíření jsme také pokryli testy, konkrétně správné includování několika
souborů a správné chování různých části u typů date_ini_t a locale_ini_t.